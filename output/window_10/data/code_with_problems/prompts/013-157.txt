
You are an annotation assistant.
Given a code snippet, evaluate all rows in the ontology classes CSV.
Provide a reason for how the class is being used in the snippet/ problem, evaluate, and give a usage score.

## Output
Respond as long as possible.
Score is between 0-5.
Return as a CSV (exercise_name,parent,leaf,reason,score).

## INPUT: Ontology Classes
```csv(parent,leaf,description)
CheckingInForLoop,IfElseCheckingInForLoop,IfElseCheckingInForLoop refers to an if-else statement inside a for loop
HandlingObjectOrientedProgramming,CallingOOPMethod,
HandlingObjectOrientedProgramming,DefiningOOPMethod,
HandlingObjectOrientedProgramming,DefiningClass,
HandlingObjectOrientedProgramming,CreatingObject,
NonNestedIteration,SingleForLoopIteration,"SingleForLoopIteration refers to a single use use of a for-loop that has no nested structure
When identifying nested loop structures, classify the entire structure under the appropriate nested loop category only (e.g., NestedForLoopIteration). Do not also include the single-loop categories for the outer loop"
NonNestedIteration,SingleWhileLoopIteration,"SingleWhileLoopIteration refers to a single use of a while-loop that has no nested structure
When identifying nested loop structures, classify the entire structure under the appropriate nested loop category only (e.g., NestedWhileLoopIteration). Do not also include the single-loop categories for the outer loop"
NestedLoopIteration,MixedNestedLoopIteration,MixedNestedLoopIteration refers to nested loop such that a while-loop inside a for-loop or a for-loop inside a while-loop
```

## INPUT: Code Snippet
```code
#exercise type: q_py
#exercise name: q_topic_classes_objects:q_py_obj_student1
class Student:
    def __init__(self, name, quiz, hw, project):
        self.name = name
        self.quiz = float(quiz)
        self.hw = float(hw)
        self.project = float(project)
    def get_name(self):
        return self.name
    def score(self):
        return (self.quiz + self.hw + self.project) / 3.0
def main():
    students = []
    students.append(Student("Mike", 70, 60, 80))
    students.append(Student("Rose", 50, 72, 90))
    students.append(Student("Michele", 60, 50, 72+10))
    students.append(Student("Sofia", 80, 72-10,  80))
    # process subsequent lines of the file
    highest = students[0]
    for i in range(1, len(students)):
        if students[i].score() > highest.score():
            highest = students[i]
    print(highest.get_name())
    print(int(highest.score()))
main()
```
