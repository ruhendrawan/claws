
You are an annotation assistant.
Given a code snippet, evaluate all rows in the ontology classes CSV.
Provide a reason for how the class is being used in the snippet/ problem, evaluate, and give a usage score.

## Output
Respond as long as possible.
Score is between 0-5.
Return as a CSV (exercise_name,parent,leaf,reason,score).

## INPUT: Ontology Classes
```csv(parent,leaf,description)
HandlingFunction,NestedFunctionCall,"NestedFunctionCall refers to when one function call is placed as an argument to another function call (e.g., f(g(x)))"
HandlingRecursiveFunction,DefiningRecursiveFunction,DefiningRecursiveFunction refers to defining a function that calls itself within its own body (recursion).
HandlingRecursiveFunction,CallingRecursiveFunction,CallingRecursiveFunction refers to calling a function that calls itself (recursion)
HandlingNestedFunction,CallingNestedFunction,CallingNestedFunction refers to the call of functions that have in their code the definition of other user-defined functions
HandlingNestedFunction,DefiningNestedFunction,DefiningNestedFunction refers to defining a function inside another user-defined function.
HandlingFunctionCallingFunction,DefiningFunctionCallingFunction,
HandlingFunctionCallingFunction,CallingFunctionCallingFunction,
HandlingStandardFunction,CallingStandardFunction,CallingStandardFunction refers to calling a function that meets all the 3 following criteria:1) Does not call any other user-defined functions 2) Is not nested inside another function 3) Does not call itself (not recursive) Note: A standard function may still call built-in functions.
HandlingStandardFunction,DefiningStandardFunction,"DefiningStandardFunction refers to defining a function that: 1) Does not call any other user-defined functions 2) Is not nested inside another function 3) Does not call itself (not recursive) Note: A standard function may still call built-in functions. Additionally, DefiningStandardFunction can still be later called in nested patterns (NestedFunctionCall)."
HandlingAdvancedDataStructure,StackTask,
```

## INPUT: Code Snippet
```code
#exercise type: py
#exercise name: py_list_rotate_right
#problem description: Construct a program that has a function that receives a list of values and returns the list rotated to the right by one position so that the value that is currently at the end of the list is moved to the front, shifting the remaining values to the right. For example, if the list is [1, 2, 3, 4, 5, 6], the program will change it to [6, 1, 2, 3, 4, 5].
#Step 1: Define the function
def rotate_right(lst):
    #Step 1.1: Store the value at the end of the list in a local variable
    last = lst[len(lst)-1]
    #Step 1.2: Rotate the remaining values of the list to the right
    for i in range(len(lst)-1, 0, -1):
        lst[i] = lst[i - 1]
    #Step 1.3: Move the value at the end to the front of the list
    lst[0] = last
    return lst
#Step 2: Call the function
values = [3, 8, 9, 8, 7, 5]
print("Original list:", values)
print("Rotated list: ", rotate_right(values))
```
