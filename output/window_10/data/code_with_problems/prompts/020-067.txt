
You are an annotation assistant.
Given a code snippet, evaluate all rows in the ontology classes CSV.
Provide a reason for how the class is being used in the snippet/ problem, evaluate, and give a usage score.

## Output
Respond as long as possible.
Score is between 0-5.
Return as a CSV (exercise_name,parent,leaf,reason,score).

## INPUT: Ontology Classes
```csv(parent,leaf,description)
HandlingFunction,NestedFunctionCall,"NestedFunctionCall refers to when one function call is placed as an argument to another function call (e.g., f(g(x)))"
HandlingRecursiveFunction,DefiningRecursiveFunction,DefiningRecursiveFunction refers to defining a function that calls itself within its own body (recursion).
HandlingRecursiveFunction,CallingRecursiveFunction,CallingRecursiveFunction refers to calling a function that calls itself (recursion)
HandlingNestedFunction,CallingNestedFunction,CallingNestedFunction refers to the call of functions that have in their code the definition of other user-defined functions
HandlingNestedFunction,DefiningNestedFunction,DefiningNestedFunction refers to defining a function inside another user-defined function.
HandlingFunctionCallingFunction,DefiningFunctionCallingFunction,
HandlingFunctionCallingFunction,CallingFunctionCallingFunction,
HandlingStandardFunction,CallingStandardFunction,CallingStandardFunction refers to calling a function that meets all the 3 following criteria:1) Does not call any other user-defined functions 2) Is not nested inside another function 3) Does not call itself (not recursive) Note: A standard function may still call built-in functions.
HandlingStandardFunction,DefiningStandardFunction,"DefiningStandardFunction refers to defining a function that: 1) Does not call any other user-defined functions 2) Is not nested inside another function 3) Does not call itself (not recursive) Note: A standard function may still call built-in functions. Additionally, DefiningStandardFunction can still be later called in nested patterns (NestedFunctionCall)."
HandlingAdvancedDataStructure,StackTask,
```

## INPUT: Code Snippet
```code
#exercise type: ae
#exercise name: ae_adl_objects2
class Car:
  def __init__(self, tank_size):
    self.tank_size = tank_size
    self.gas = 0
  def fuel(self, gallons):
    added = min(gallons, self.tank_size - self.gas)
    self.gas = self.gas + added
    return added
  def drive(self, consumption):
    if self.gas < consumption:
      return False
    self.gas = self.gas - consumption
    return True
  def get_fuel(self):
    return self.gas
  def has_more_fuel(self, another):
    return self.gas > another.gas
car = Car(30)
gallons = car.fuel(60)
print(gallons)
car.drive(10)
print(car.get_fuel())
another_car = Car(30)
print(car.has_more_fuel(another_car))
```
