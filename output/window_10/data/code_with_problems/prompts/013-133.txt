
You are an annotation assistant.
Given a code snippet, evaluate all rows in the ontology classes CSV.
Provide a reason for how the class is being used in the snippet/ problem, evaluate, and give a usage score.

## Output
Respond as long as possible.
Score is between 0-5.
Return as a CSV (exercise_name,parent,leaf,reason,score).

## INPUT: Ontology Classes
```csv(parent,leaf,description)
CheckingInForLoop,IfElseCheckingInForLoop,IfElseCheckingInForLoop refers to an if-else statement inside a for loop
HandlingObjectOrientedProgramming,CallingOOPMethod,
HandlingObjectOrientedProgramming,DefiningOOPMethod,
HandlingObjectOrientedProgramming,DefiningClass,
HandlingObjectOrientedProgramming,CreatingObject,
NonNestedIteration,SingleForLoopIteration,"SingleForLoopIteration refers to a single use use of a for-loop that has no nested structure
When identifying nested loop structures, classify the entire structure under the appropriate nested loop category only (e.g., NestedForLoopIteration). Do not also include the single-loop categories for the outer loop"
NonNestedIteration,SingleWhileLoopIteration,"SingleWhileLoopIteration refers to a single use of a while-loop that has no nested structure
When identifying nested loop structures, classify the entire structure under the appropriate nested loop category only (e.g., NestedWhileLoopIteration). Do not also include the single-loop categories for the outer loop"
NestedLoopIteration,MixedNestedLoopIteration,MixedNestedLoopIteration refers to nested loop such that a while-loop inside a for-loop or a for-loop inside a while-loop
```

## INPUT: Code Snippet
```code
#exercise type: ae
#exercise name: ae_python_class2
class Bus:
  def __init__(self, capacity):
    self.capacity = capacity
    self.passengers = 0
  def take_passengers(self, count):
    added = min(count, self.capacity - self.passengers)
    self.passengers = self.passengers + added
    return added
  def leave_passengers(self, count):
    if self.passengers < count:
      return False
    self.passengers = self.passengers - count
    return True
  def get_passenger_count(self):
    return self.passengers
  def is_bigger_than(self, other):
    return self.capacity > other.capacity
bus1 = Bus(50)
count = bus.take_passengers(60)
print(count)
bus1.leave_passengers(10)
print(bus1.get_passenger_count())
bus2 = Bus(30)
print(bus1.has_more_passengers(bus2))
```
