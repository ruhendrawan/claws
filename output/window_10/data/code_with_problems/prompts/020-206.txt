
You are an annotation assistant.
Given a code snippet, evaluate all rows in the ontology classes CSV.
Provide a reason for how the class is being used in the snippet/ problem, evaluate, and give a usage score.

## Output
Respond as long as possible.
Score is between 0-5.
Return as a CSV (exercise_name,parent,leaf,reason,score).

## INPUT: Ontology Classes
```csv(parent,leaf,description)
HandlingFunction,NestedFunctionCall,"NestedFunctionCall refers to when one function call is placed as an argument to another function call (e.g., f(g(x)))"
HandlingRecursiveFunction,DefiningRecursiveFunction,DefiningRecursiveFunction refers to defining a function that calls itself within its own body (recursion).
HandlingRecursiveFunction,CallingRecursiveFunction,CallingRecursiveFunction refers to calling a function that calls itself (recursion)
HandlingNestedFunction,CallingNestedFunction,CallingNestedFunction refers to the call of functions that have in their code the definition of other user-defined functions
HandlingNestedFunction,DefiningNestedFunction,DefiningNestedFunction refers to defining a function inside another user-defined function.
HandlingFunctionCallingFunction,DefiningFunctionCallingFunction,
HandlingFunctionCallingFunction,CallingFunctionCallingFunction,
HandlingStandardFunction,CallingStandardFunction,CallingStandardFunction refers to calling a function that meets all the 3 following criteria:1) Does not call any other user-defined functions 2) Is not nested inside another function 3) Does not call itself (not recursive) Note: A standard function may still call built-in functions.
HandlingStandardFunction,DefiningStandardFunction,"DefiningStandardFunction refers to defining a function that: 1) Does not call any other user-defined functions 2) Is not nested inside another function 3) Does not call itself (not recursive) Note: A standard function may still call built-in functions. Additionally, DefiningStandardFunction can still be later called in nested patterns (NestedFunctionCall)."
HandlingAdvancedDataStructure,StackTask,
```

## INPUT: Code Snippet
```code
#exercise type: py
#exercise name: py_str_repeat_chars
#problem description: Construct a program that has a function that receives a string and creates a new string that has each character of the given string repeated two times. For example, the new string that will be formed from the string 'abc' is 'aabbcc'.
#Step 1: Define the function
def double_char(s):
    #Step 1.1: Assign initial value to the variable that we need for the new string
    new_s = ""
    #Step 1.2: Iterate through the characters in the given string
    for char in s:
        #Step 1.2.1: Add the repeated character to the the new string
        new_s += char * 2
    #String 1.3: Print the new string
    print(new_s)
#Step 2: Call the function
double_char("Hi There")
```
