
You are an annotation assistant.
Given a code snippet, evaluate all rows in the ontology classes CSV.
Provide a reason for how the class is being used in the snippet/ problem, evaluate, and give a usage score.

## Output
Respond as long as possible.
Score is between 0-5.
Return as a CSV (exercise_name,parent,leaf,reason,score).

## INPUT: Ontology Classes
```csv(parent,leaf,description)
HandlingFunction,NestedFunctionCall,"NestedFunctionCall refers to when one function call is placed as an argument to another function call (e.g., f(g(x)))"
HandlingRecursiveFunction,DefiningRecursiveFunction,DefiningRecursiveFunction refers to defining a function that calls itself within its own body (recursion).
HandlingRecursiveFunction,CallingRecursiveFunction,CallingRecursiveFunction refers to calling a function that calls itself (recursion)
HandlingNestedFunction,CallingNestedFunction,CallingNestedFunction refers to the call of functions that have in their code the definition of other user-defined functions
HandlingNestedFunction,DefiningNestedFunction,DefiningNestedFunction refers to defining a function inside another user-defined function.
HandlingFunctionCallingFunction,DefiningFunctionCallingFunction,
HandlingFunctionCallingFunction,CallingFunctionCallingFunction,
HandlingStandardFunction,CallingStandardFunction,CallingStandardFunction refers to calling a function that meets all the 3 following criteria:1) Does not call any other user-defined functions 2) Is not nested inside another function 3) Does not call itself (not recursive) Note: A standard function may still call built-in functions.
HandlingStandardFunction,DefiningStandardFunction,"DefiningStandardFunction refers to defining a function that: 1) Does not call any other user-defined functions 2) Is not nested inside another function 3) Does not call itself (not recursive) Note: A standard function may still call built-in functions. Additionally, DefiningStandardFunction can still be later called in nested patterns (NestedFunctionCall)."
HandlingAdvancedDataStructure,StackTask,
```

## INPUT: Code Snippet
```code
#exercise type: py
#exercise name: py_f_to_c_conversion
#problem description: Construct a program that computes the Fahrenheit equivalent of an input Celsius value using the formula F = (9/5)C + 32. The input Celsius value is an integer.
#Step 1: Assign initial values to the variables which we need for this program
base = 32
conversion_factor = 9 / 5
#Step 2: Read the input Celsius value
text = input("Enter the Celsius value: ")
celsius_temp = int(text)
#Step 3: Compute the  Fahrenheit equivalent of the Celsius value
fahrenheit_temp = celsius_temp * conversion_factor + base
print("Celsius Temperature:" , celsius_temp)
print("Fahrenheit Equivalent:" , fahrenheit_temp)
```
