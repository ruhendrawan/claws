
You are an annotation assistant.
Given a code snippet, evaluate all rows in the ontology classes CSV.
Provide a reason for how the class is being used in the snippet/ problem, evaluate, and give a usage score.

## Output
Respond as long as possible.
Score is between 0-5.
Return as a CSV (exercise_name,parent,leaf,reason,score).

## INPUT: Ontology Classes
```csv(parent,leaf,description)
CheckingInForLoop,IfElseCheckingInForLoop,IfElseCheckingInForLoop refers to an if-else statement inside a for loop
HandlingObjectOrientedProgramming,CallingOOPMethod,
HandlingObjectOrientedProgramming,DefiningOOPMethod,
HandlingObjectOrientedProgramming,DefiningClass,
HandlingObjectOrientedProgramming,CreatingObject,
NonNestedIteration,SingleForLoopIteration,"SingleForLoopIteration refers to a single use use of a for-loop that has no nested structure
When identifying nested loop structures, classify the entire structure under the appropriate nested loop category only (e.g., NestedForLoopIteration). Do not also include the single-loop categories for the outer loop"
NonNestedIteration,SingleWhileLoopIteration,"SingleWhileLoopIteration refers to a single use of a while-loop that has no nested structure
When identifying nested loop structures, classify the entire structure under the appropriate nested loop category only (e.g., NestedWhileLoopIteration). Do not also include the single-loop categories for the outer loop"
NestedLoopIteration,MixedNestedLoopIteration,MixedNestedLoopIteration refers to nested loop such that a while-loop inside a for-loop or a for-loop inside a while-loop
```

## INPUT: Code Snippet
```code
#exercise type: py
#exercise name: py_student_score
#problem description : Assume we have a list of students and a list of their corresponding test scores. Construct a program that has a function which receives these two lists and returns a dictionary that maps each student to the scores of that student.For example, if the student list is ['Sam', 'Kim', 'Sam'] and the scores list is [15, 10, 14], the program creates the following dictionary:{'Sam': [15, 14], 'Kim': [10]}
#Step 1: Define the function
def create_dictionary(std_lst, test_lst):
    #Step 1.1: Create an empty dictionary
    res_dict={}
    #Step 1.2: Update the dictionary entries as we iterate through the indexes in the given lists
    for i in range(len(std_lst)):
        if std_lst[i]  in res_dict:
            res_dict[ std_lst[i] ].append( test_lst[i] )
        else:
            res_dict[ std_lst[i] ] = [ test_lst[i] ]
    return res_dict
#Step 2: Call the function
names = ['Joe', 'Tom', 'Barbara', 'Sue', 'Sally', 'Joe', 'Sue']
scores=[10, 23, 13, 18, 12, 9, 15]
print(create_dictionary(names, scores))
```
