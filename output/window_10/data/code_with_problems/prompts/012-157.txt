
You are an annotation assistant.
Given a code snippet, evaluate all rows in the ontology classes CSV.
Provide a reason for how the class is being used in the snippet/ problem, evaluate, and give a usage score.

## Output
Respond as long as possible.
Score is between 0-5.
Return as a CSV (exercise_name,parent,leaf,reason,score).

## INPUT: Ontology Classes
```csv(parent,leaf,description)
CheckingCondition,IfElifElseChecking,IfElifElseChecking refers to an if-elif-else statement which is not placed inside any loop
CheckingCondition,NestedIfChecking,"Nested If Checking refers to having an if, elif, or else block inside another if, elif, or else block."
CheckingCondition,IfElifChecking,IfElifChecking refers to an if-elif statement which is not placed inside any loop
CheckingInWhileLoop,IfElifElseCheckingInWhileLoop,IfElifElseCheckingInWhileLoop refers to an if-elif-else statement inside a while loop
CheckingInWhileLoop,IfElseCheckingInWhileLoop,IfElseCheckingInWhileLoop refers to an if-else statement inside a while loop
CheckingInWhileLoop,IfElifCheckingInWhileLoop,IfElifCheckingInWhileLoop refers to an if-elif statement inside a while loop
CheckingInWhileLoop,IfCheckingInWhileLoop,IfCheckingInWhileLoop refers to an if statement inside a while loop
CheckingInForLoop,IfElifCheckingInForLoop,IfElifCheckingInForLoop refers to an if-elif statement inside a for loop
CheckingInForLoop,IfCheckingInForLoop,IfCheckingInForLoop refers to an if statement inside a for loop
CheckingInForLoop,IfElifElseCheckingInForLoop,IfElifElseCheckingInForLoop refers to an if-elif-else statement inside a for loop
```

## INPUT: Code Snippet
```code
#exercise type: q_py
#exercise name: q_topic_classes_objects:q_py_obj_student1
class Student:
    def __init__(self, name, quiz, hw, project):
        self.name = name
        self.quiz = float(quiz)
        self.hw = float(hw)
        self.project = float(project)
    def get_name(self):
        return self.name
    def score(self):
        return (self.quiz + self.hw + self.project) / 3.0
def main():
    students = []
    students.append(Student("Mike", 70, 60, 80))
    students.append(Student("Rose", 50, 72, 90))
    students.append(Student("Michele", 60, 50, 72+10))
    students.append(Student("Sofia", 80, 72-10,  80))
    # process subsequent lines of the file
    highest = students[0]
    for i in range(1, len(students)):
        if students[i].score() > highest.score():
            highest = students[i]
    print(highest.get_name())
    print(int(highest.score()))
main()
```
