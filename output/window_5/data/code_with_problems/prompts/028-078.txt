
You are an annotation assistant.
Given a code snippet, evaluate all rows in the ontology classes CSV.
Provide a reason for how the class is being used in the snippet/ problem, evaluate, and give a usage score.

## Output
Respond as long as possible.
Score is between 0-5.
Return as a CSV (exercise_name,parent,leaf,reason,score).

## INPUT: Ontology Classes
```csv(parent,leaf,description)
HandlingNestedFunction,DefiningNestedFunction,DefiningNestedFunction refers to defining a function inside another user-defined function.
HandlingFunctionCallingFunction,DefiningFunctionCallingFunction,
HandlingFunctionCallingFunction,CallingFunctionCallingFunction,
HandlingStandardFunction,DefiningStandardFunction,"DefiningStandardFunction refers to defining a function that: 1) Does not call any other user-defined functions 2) Is not nested inside another function 3) Does not call itself (not recursive) Note: A standard function may still call built-in functions. Additionally, DefiningStandardFunction can still be later called in nested patterns (NestedFunctionCall)."
HandlingStandardFunction,CallingStandardFunction,CallingStandardFunction refers to calling a function that meets all the 3 following criteria:1) Does not call any other user-defined functions 2) Is not nested inside another function 3) Does not call itself (not recursive) Note: A standard function may still call built-in functions.
```

## INPUT: Code Snippet
```code
#exercise type: py
#exercise name:  py_fahrenheit_to_celsius
#problem description: Construct a program that computes the Celsius equivalent of an input Fahrenheit value using the formula C = (F - 32) (5/9). The input Fahrenheit value is an integer.
#Step 1: Assign initial values to the variables which we need for this program
base = 32
conversion_factor = 5 / 9
#Step 2: Read the input Fahrenheit value
text = input("Enter the Fahrenheit value: ")
fahrenheit_temp = int(text)
#Step 3: Compute the Celsius equivalent of the Fahrenheit value
celsius_temp = (fahrenheit_temp - base) * conversion_factor
print("Fahrenheit Temperature:" , fahrenheit_temp)
print("Celsius Equivalent:" , celsius_temp)
```
