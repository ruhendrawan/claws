
You are an annotation assistant.
Given a code snippet, evaluate all rows in the ontology classes CSV.
Provide a reason for how the class is being used in the snippet/ problem, evaluate, and give a usage score.

## Output
Respond as long as possible.
Score is between 0-5.
Return as a CSV (exercise_name,parent,leaf,reason,score).

## INPUT: Ontology Classes
```csv(parent,leaf,description)
ArtithmeticOperator,*,
ArtithmeticOperator,+,
ArtithmeticOperator,-,
ComparisonOperator,LessOrEqual,<=
ComparisonOperator,==,==
```

## INPUT: Code Snippet
```code
#exercise type: py
#exercise name:  py_if_else_wage2
#problem description: Construct a program for the payment department of a company to calculate the wage of an employee who works at the customer service call center. Like other employees in the company, the employees at the customer service call center are paid based on the hours that they work. If they work over 40 hours in a week, the payment amount should take into account the overtime hours. The overtime hours are paid at a rate one and a half times the regular pay rate. The company's policy is to pay more to those employees at the customer service call center who work during weekends. Therefore, the minimum extra pay that the employees could receive for each day of work during weekends is $30. The extra pay increases to the maximum of $50 for the employees who have at least 5 days of work during weekends.
#Step 1: Assign initial values to the variables which we need for this program
rate = 8.25
standard = 40
weekend_pay_min = 30
weekend_pay_max = 50
#Step 2: Read the input data
text = input("Enter the number of hours that the employee has worked: ")
hours = int(text)
text = input("Enter the number of days that the employee has worked during weekends: ")
no_weekend_days = int(text)
#Step 3: Pay overtime at "time and a half" of the regular rate of pay
if hours > standard :
    wage = standard * rate + ( hours-standard ) * ( rate * 1.5 )
else :
    wage = hours * rate
#Step 4: Take into account the extra pay for the work during weekends days
if no_weekend_days < 5 :
    wage += (no_weekend_days * weekend_pay_min)
else :
    wage += (no_weekend_days * weekend_pay_max)
#Step 5: Print the calculated wage
print("Wage:", wage)
```
