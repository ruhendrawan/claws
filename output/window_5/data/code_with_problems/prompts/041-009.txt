
You are an annotation assistant.
Given a code snippet, evaluate all rows in the ontology classes CSV.
Provide a reason for how the class is being used in the snippet/ problem, evaluate, and give a usage score.

## Output
Respond as long as possible.
Score is between 0-5.
Return as a CSV (exercise_name,parent,leaf,reason,score).

## INPUT: Ontology Classes
```csv(parent,leaf,description)
CheckingInForLoop,IfCheckingInForLoop,IfCheckingInForLoop refers to an if statement inside a for loop
CheckingInForLoop,IfElseCheckingInForLoop,IfElseCheckingInForLoop refers to an if-else statement inside a for loop
CheckingInForLoop,IfElifElseCheckingInForLoop,IfElifElseCheckingInForLoop refers to an if-elif-else statement inside a for loop
CheckingInForLoop,IfElifCheckingInForLoop,IfElifCheckingInForLoop refers to an if-elif statement inside a for loop
CheckingInWhileLoop,IfElseCheckingInWhileLoop,IfElseCheckingInWhileLoop refers to an if-else statement inside a while loop
```

## INPUT: Code Snippet
```code
#exercise type: py
#exercise name: py_check_age
#problem description : Construct a program that receives a string that has the user name and age separated by a colon, and prints whether the user is a teenager. Make sure that the program handles all possible exceptions.
#Step 1: Define the function
def check_age(s):
    #Step 1.1: Split the given string into the name and age
    lst = s.split(":")
    #Step 1.2: Enclose the code that might throw an exception within the try block
    try:
        name = lst[0]
        age = int(lst[1])
        if age >= 13 and age <= 19 :
            print(name + " is a teenager.")
        else:
            print(name + " is not a teenager.")
    #Step 1.3: Handle all possible exceptions that may be thrown in the try block
    except IndexError :
        print("Error! Separate the name and age by a colon.")
    except ValueError :
        print("Error! Age must be an integer.")
#Step 2: Call the function
check_age(input("Enter the name and age, separated by a colon:"))
```
