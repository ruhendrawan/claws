
You are an annotation assistant.
Given a code snippet, evaluate all rows in the ontology classes CSV.
Provide a reason for how the class is being used in the snippet/ problem, evaluate, and give a usage score.

## Output
Respond as long as possible.
Score is between 0-5.
Return as a CSV (exercise_name,parent,leaf,reason,score).

## INPUT: Ontology Classes
```csv(parent,leaf,description)
WhileLoopWithUpdate,WhileLoopWithListIndexing,WhileLoopWithListIndexing refers to when there is an indexing of a list happening inside a while loop
NestedLoopIteration,MixedNestedLoopIteration,MixedNestedLoopIteration refers to nested loop such that a while-loop inside a for-loop or a for-loop inside a while-loop
NestedLoopIteration,NestedWhileLoopIteration,NestedWhileLoopIteration refers to nested loop such that a while-loop is inside another while-loop
NestedLoopIteration,NestedForLoopIteration,NestedForLoopIteration refers to nested loop such that  a for-loop is inside another for-loop
ForLoopWithUpdate,ForLoopWith*=,ForLoopWith*= refers to when there is an update of a variable with the multiplication sign inside a for loop
```

## INPUT: Code Snippet
```code
#exercise type: py
#exercise name: py_adjacent_consecutive
#problem description: Construct a program that checks whether a sequence of integers, entered one at a time, contains adjacent integers that are consecutive. The user enters -1 to indicate the end of the input. Note that integers which follow each other in order, without gaps, from smallest to largest are consecutive numbers. For example, 12, 13, 14 and 15 are consecutive numbers.
#Step 1: Read the first integer that the user enters
text = input("Enter an integer: ")
num = int(text)
#Step 2: Read the rest of the integers that the user enters and check for adjacent consecutive numbers
while num != -1 :
    previous = num
    text = input("Enter an integer: ")
    num = int(text)
    if num != -1 and num - previous == 1 :
        print(previous, "and", num, "are consecutive.")
```
