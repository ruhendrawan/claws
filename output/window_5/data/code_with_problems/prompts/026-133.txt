
You are an annotation assistant.
Given a code snippet, evaluate all rows in the ontology classes CSV.
Provide a reason for how the class is being used in the snippet/ problem, evaluate, and give a usage score.

## Output
Respond as long as possible.
Score is between 0-5.
Return as a CSV (exercise_name,parent,leaf,reason,score).

## INPUT: Ontology Classes
```csv(parent,leaf,description)
WhileLoopWithUpdate,WhileLoopWithListIndexing,WhileLoopWithListIndexing refers to when there is an indexing of a list happening inside a while loop
NestedLoopIteration,MixedNestedLoopIteration,MixedNestedLoopIteration refers to nested loop such that a while-loop inside a for-loop or a for-loop inside a while-loop
NestedLoopIteration,NestedWhileLoopIteration,NestedWhileLoopIteration refers to nested loop such that a while-loop is inside another while-loop
NestedLoopIteration,NestedForLoopIteration,NestedForLoopIteration refers to nested loop such that  a for-loop is inside another for-loop
ForLoopWithUpdate,ForLoopWith*=,ForLoopWith*= refers to when there is an update of a variable with the multiplication sign inside a for loop
```

## INPUT: Code Snippet
```code
#exercise type: ae
#exercise name: ae_python_class2
class Bus:
  def __init__(self, capacity):
    self.capacity = capacity
    self.passengers = 0
  def take_passengers(self, count):
    added = min(count, self.capacity - self.passengers)
    self.passengers = self.passengers + added
    return added
  def leave_passengers(self, count):
    if self.passengers < count:
      return False
    self.passengers = self.passengers - count
    return True
  def get_passenger_count(self):
    return self.passengers
  def is_bigger_than(self, other):
    return self.capacity > other.capacity
bus1 = Bus(50)
count = bus.take_passengers(60)
print(count)
bus1.leave_passengers(10)
print(bus1.get_passenger_count())
bus2 = Bus(30)
print(bus1.has_more_passengers(bus2))
```
